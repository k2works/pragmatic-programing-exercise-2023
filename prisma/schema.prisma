// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  number    String    @id @default(cuid()) @map("口座番号")
  name      String    @map("名義")
  type      String    @map("種別")
  balance   Int       @map("残高")
  updatedAt DateTime? @map("更新日")

  @@map("口座")
}

model RetiredAccount {
  number    String    @id @default(cuid()) @map("口座番号")
  name      String    @map("名義")
  type      String    @map("種別")
  balance   Int       @map("解約時残高")
  retiredAt DateTime? @map("解約日")

  @@map("廃止口座")
}

model Transaction {
  number              Int               @id @default(autoincrement()) @map("取引番号")
  transactionReasonId Int               @map("取引事由ＩＤ")
  day                 DateTime          @map("日付")
  accountNumber       String            @map("口座番号")
  income              Int?              @map("入金額")
  outcome             Int?              @map("出金額")
  transactionReason   TransactionReason @relation(fields: [transactionReasonId], references: [id])

  @@map("取引")
}

model TransactionReason {
  id          Int           @id @default(autoincrement()) @map("取引事由ＩＤ")
  name        String        @map("取引事由名")
  transaction Transaction[]

  @@map("取引事由")
}

model Product {
  code        String  @id @default(cuid()) @map("商品コード")
  name        String  @map("商品名")
  price       Int     @map("単価")
  type        String  @map("商品区分")
  relatedCode String? @map("関連商品コード")

  product       Product?  @relation(name: "ChildProducts", fields: [relatedCode], references: [code])
  ChildProducts Product[] @relation(name: "ChildProducts")

  @@map("商品")
}

model RetiredProduct {
  code      String    @id @default(cuid()) @map("商品コード")
  name      String    @map("商品名")
  price     Int       @map("単価")
  type      String    @map("商品区分")
  retiredAt DateTime? @map("廃番日")
  quantity  Int       @map("売上個数")

  @@map("廃番商品")
}

model Order {
  day            DateTime @map("注文日")
  orderNumber    String   @map("注文番号")
  orderSubNumber Int      @map("注文枝番")
  productCode    String   @map("商品コード")
  quantity       Int      @map("数量")
  couponDiscount Int?     @map("クーポン割引料")

  @@unique([orderNumber, orderSubNumber])
  @@map("注文")
}

model Party {
  id             String @map("ID") //英字1桁 + 数字2桁
  name           String @map("名称")
  professionCode String @map("職業コード") //01:勇者 10:戦士 11:武闘家 20:魔法使い 21:学者 
  hp             Int?   @map("HP")
  mp             Int?   @map("MP")
  statusCode     String @map("状態コード") //00: 異常なし 01:眠り 02:毒 03:沈黙 04:混乱 09:気絶

  @@unique([id])
  @@map("パーティ")
}

model Event {
  eventNumber         Int               @id @default(autoincrement()) @map("イベント番号")
  eventName           String            @map("イベント名称")
  type                String            @map("タイプ") // 1:強制 2:フリー 3:特殊
  premiseEventNumber  Int?              @map("前提イベント番号") // 事前にクリアが必要なイベント番号
  followOnEventNumber Int?              @map("後続イベント番号") // 次に発生するイベント番号
  experienceEvent     ExperienceEvent[]

  @@map("イベントテーブル")
}

model ExperienceEvent {
  eventNumber Int     @id @default(autoincrement()) @map("イベント番号")
  clearType   String  @map("クリア区分") // 0:プレイ中 1:クリア済
  clearResult String? @map("クリア結果") // 結果に応じたランク(A,B,C) *未クリアはNULL
  routeNumber Int?    @map("ルート番号") // クリアしたイベントの連番 *未クリアはNULL
  event       Event?  @relation(fields: [eventNumber], references: [eventNumber])

  @@map("経験イベント")
}

model Code {
  type  String @map("コード種別")
  value String @map("コード値")
  name  String @map("コード名称")

  @@unique([type, value])
  @@map("コード")
}
